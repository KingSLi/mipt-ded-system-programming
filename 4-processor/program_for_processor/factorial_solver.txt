in
pop rcx
push 1
push 1
push 1
pop rax
pop rbx

# for counter
push 0
push 0
# for counter

: for
# pop counter
pop
pop
# pop counter
push rax
push 1
add
pop [0]
push [0]
mul
push [0]
pop rax

push rbx
push 1
add
pop rbx
push rbx
push rcx
je end
jmp for
: end
pop
pop
out